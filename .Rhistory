shinyApp(ui, server)
View(uc_admit_perc)
ui <- dashboardPage(skin = "black",
dashboardHeader(title = "University of California Admissions from 2010 - 2019",
titleWidth = 600),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("category", "Select Admission Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants"),
selectInput("ethnicity", "Select Ethnicity", choices = c("All", "African American", "American Indian", "Asian", "Chicano/Latino", "International", "White", "Unknown"), selected = "All"),
selectInput("campus", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
hr(),
helpText("Reference: University of California Information Center, Admissions (2010-2019)")
), # close the first box
box(title = "Admissions by Ethnicity", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
uc_admit_perc %>%
filter(campus == input$campus, ethnicity == input$ethnicity, category == input$category) %>%
ggplot(aes_string(x = "academic_yr", y = "filtered_count_fr")) +
scale_fill_brewer(palette = "Paired") +
geom_col(position = "dodge") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme_minimal() +
labs(y = "Number of Individuals")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin = "black",
dashboardHeader(title = "University of California Admissions from 2010 - 2019",
titleWidth = 600),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("category", "Select Admission Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants"),
selectInput("ethnicity", "Select Ethnicity", choices = c("All", "African American", "American Indian", "Asian", "Chicano/Latino", "International", "White", "Unknown"), selected = "All"),
selectInput("campus", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("year", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), selected = "2010"),
hr(),
helpText("Reference: University of California Information Center, Admissions (2010-2019)")
), # close the first box
box(title = "Admissions by Ethnicity", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
uc_admit_perc %>%
filter(campus == input$campus, ethnicity == input$ethnicity, category == input$category, year == input$year) %>%
ggplot(aes_string(x = "academic_yr", y = "filtered_count_fr")) +
scale_fill_brewer(palette = "Paired") +
geom_col(position = "dodge") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme_minimal() +
labs(y = "Number of Individuals")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin = "black",
dashboardHeader(title = "University of California Admissions from 2010 - 2019",
titleWidth = 600),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("category", "Select Admission Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants"),
selectInput("ethnicity", "Select Ethnicity", choices = c("All", "African American", "American Indian", "Asian", "Chicano/Latino", "International", "White", "Unknown"), selected = "All"),
selectInput("campus", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("year", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), selected = "2010"),
hr(),
helpText("Reference: University of California Information Center, Admissions (2010-2019)")
), # close the first box
box(title = "Admissions by Ethnicity", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
uc_admit_perc %>%
filter(campus == input$campus, ethnicity == input$ethnicity, category == input$category, year == input$year) %>%
ggplot(aes_string(x = "academic_yr", y = "filtered_count_fr")) +
scale_fill_brewer(palette = "Paired") +
geom_col(position = "dodge") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme_minimal() +
labs(y = "Number of Individuals")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin = "black",
dashboardHeader(title = "University of California Admissions from 2010 - 2019",
titleWidth = 600),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("category", "Select Admission Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants"),
selectInput("ethnicity", "Select Ethnicity", choices = c("All", "African American", "American Indian", "Asian", "Chicano/Latino", "International", "White", "Unknown"), selected = "All"),
selectInput("campus", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("academic_yr", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), selected = "2010"),
hr(),
helpText("Reference: University of California Information Center, Admissions (2010-2019)")
), # close the first box
box(title = "Admissions by Ethnicity", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
uc_admit_perc %>%
filter(campus == input$campus, ethnicity == input$ethnicity, category == input$category, year == input$year) %>%
ggplot(aes_string(x = "academic_yr", y = "filtered_count_fr")) +
scale_fill_brewer(palette = "Paired") +
geom_col(position = "dodge") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme_minimal() +
labs(y = "Number of Individuals")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin = "black",
dashboardHeader(title = "University of California Admissions from 2010 - 2019",
titleWidth = 600),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("category", "Select Admission Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants"),
selectInput("ethnicity", "Select Ethnicity", choices = c("All", "African American", "American Indian", "Asian", "Chicano/Latino", "International", "White", "Unknown"), selected = "All"),
selectInput("campus", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("academic_yr", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), selected = "2010"),
hr(),
helpText("Reference: University of California Information Center, Admissions (2010-2019)")
), # close the first box
box(title = "Admissions by Ethnicity", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
uc_admit_perc %>%
filter(campus == input$campus, ethnicity == input$ethnicity, category == input$category, academic_yr == input$year) %>%
ggplot(aes_string(x = "academic_yr", y = "filtered_count_fr")) +
scale_fill_brewer(palette = "Paired") +
geom_col(position = "dodge") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme_minimal() +
labs(y = "Number of Individuals")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin = "black",
dashboardHeader(title = "University of California Admissions from 2010 - 2019",
titleWidth = 600),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("category", "Select Admission Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants"),
selectInput("ethnicity", "Select Ethnicity", choices = c("All", "African American", "American Indian", "Asian", "Chicano/Latino", "International", "White", "Unknown"), selected = "All"),
selectInput("campus", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("academic_yr", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), selected = "2010"),
hr(),
helpText("Reference: University of California Information Center, Admissions (2010-2019)")
), # close the first box
box(title = "Admissions by Ethnicity", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
uc_admit_perc %>%
filter(campus == input$campus, ethnicity == input$ethnicity, category == input$category, academic_yr == input$academic_yr) %>%
ggplot(aes_string(x = "academic_yr", y = "filtered_count_fr")) +
scale_fill_brewer(palette = "Paired") +
geom_col(position = "dodge") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme_minimal() +
labs(y = "Number of Individuals")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
getwd()
getwd()
setwd("C:/Users/adria/Desktop/BIS15W2021_Group_6_Project")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(janitor)
library(here)
library(skimr)
library(ggthemes)
library(naniar)
library(readr)
library(lubridate)
colors <- paletteer::palettes_d_names
#view(colors)
nectar_perflower <- read_csv(here("potential_datasets", "AgriLand_Nectar_perflower.csv"))
nectar_perflower <- nectar_perflower %>%
clean_names() %>%
mutate_all(tolower)
summary(nectar_perflower)
nectar_perflower <- nectar_perflower %>%
separate(species,
into = c("genus", "species")) %>%
separate(bagging_date,
into = c("bagging_day", "bagging_month", "bagging_year"),
sep = "/") %>%
separate(collection_date,
into = c("collection_day", "collection_month", "collection_year"),
sep = "/")
nectar_perflower <- nectar_perflower %>%
separate(habitat,
into = c("habitat_class", "habitat_specific"),
sep = "-",
extra = "merge")
nectar_perflower <- nectar_perflower %>%
select(-bagging_year, -collection_year)
nectar_perflower
names(nectar_perflower)
nectar_perflower %>%
count(genus, species, sort = T)
nectar_perflower %>%
count(genus, sort = T)
nectar_perflower %>%
count(habitat_class, sort = T)
nectar_perflower %>%
count(genus, species, habitat_class)
levels(nectar_perflower$species)
nectar_perflower %>%
ggplot(aes(x = habitat_class)) +
geom_bar() +
coord_flip()
nectar_perflower %>%
filter(habitat_specific != "NA") %>%
ggplot(aes(x = habitat_class, fill = habitat_specific))+
geom_bar(position = "dodge") +
coord_flip()
library(shiny); runApp('C:/Users/adria/Desktop/BIS15W2021_ang/lab13/lab13_hw_question2.R')
getwd()
setwd("C:/Users/adria/Desktop/BIS15W2021_ang")
knitr::opts_chunk$set(echo = TRUE)
ui <- dashboardPage(skin = "black",
dashboardHeader(title = "University of California Admissions from 2010 - 2019",
titleWidth = 600),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Admission Criteria", choices = c("academic_yr", "campus", "category"),
selected = "academic_yr"),
selectInput("filter", "Select Ethnicity", choices = c("All", "African American", "American Indian", "Asian", "Chicano/Latino", "International", "White", "Unknown"), selected = "All"),
hr(),
helpText("Reference: University of California Information Center, Admissions (2010-2019)")
), # close the first box
box(title = "Admissions by Ethnicity", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
library(tidyverse)
library(shiny)
library(shinydashboard)
library(naniar)
library(janitor)
library(stringr)
library(RColorBrewer)
UC_admit <- readr::read_csv("data/UC_admit.csv")
UC_admit <- clean_names(UC_admit)
UC_admit
uc_admit_perc <- UC_admit %>%
mutate(perc_fc_dbl = str_replace(perc_fr, "%", "")) %>%
select(-perc_fr)
uc_admit_perc$perc_fc_dbl <- as.numeric(uc_admit_perc$perc_fc_dbl)
uc_admit_perc$academic_yr <- as.factor(uc_admit_perc$academic_yr)
uc_admit_perc
ui <- dashboardPage(skin = "black",
dashboardHeader(title = "University of California Admissions from 2010 - 2019",
titleWidth = 600),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Admission Criteria", choices = c("academic_yr", "campus", "category"),
selected = "academic_yr"),
selectInput("filter", "Select Ethnicity", choices = c("All", "African American", "American Indian", "Asian", "Chicano/Latino", "International", "White", "Unknown"), selected = "All"),
hr(),
helpText("Reference: University of California Information Center, Admissions (2010-2019)")
), # close the first box
box(title = "Admissions by Ethnicity", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
uc_admit_perc %>%
filter(ethnicity == input$filter) %>%
ggplot(aes_string(x = input$x, y = "filtered_count_fr", fill = "campus")) +
scale_fill_brewer(palette = "Paired") +
geom_col(position = "dodge") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme_minimal() +
labs(y = "Number of Admitted Freshmen")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin = "black",
dashboardHeader(title = "University of California Admissions from 2010 - 2019",
titleWidth = 600),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Admission Criteria", choices = c("academic_yr", "campus", "category"),
selected = "academic_yr"),
selectInput("campus", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
hr(),
helpText("Reference: University of California Information Center, Admissions (2010-2019)")
), # close the first box
box(title = "Admissions by Ethnicity", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
uc_admit_perc %>%
ggplot(aes_string(x = "ethnicity", y = "filtered_count_fr")) +
scale_fill_brewer(palette = "Paired") +
geom_col(position = "dodge") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme_minimal() +
labs(y = "Number of Admitted Freshmen")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin = "black",
dashboardHeader(title = "University of California Admissions from 2010 - 2019",
titleWidth = 600),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Admission Criteria", choices = c("academic_yr", "campus", "category"),
selected = "academic_yr"),
selectInput("filter", "Select Ethnicity", choices = c("All", "African American", "American Indian", "Asian", "Chicano/Latino", "International", "White", "Unknown"), selected = "All"),
hr(),
helpText("Reference: University of California Information Center, Admissions (2010-2019)")
), # close the first box
box(title = "Admissions by Ethnicity", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
uc_admit_perc %>%
filter(ethnicity == input$filter) %>%
ggplot(aes_string(x = input$x, y = "filtered_count_fr", fill = "campus")) +
scale_fill_brewer(palette = "Paired") +
geom_col(position = "dodge") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme_minimal() +
labs(y = "Number of Admitted Freshmen")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin = "black",
dashboardHeader(title = "University of California Admissions from 2010 - 2019",
titleWidth = 600),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Admission Criteria", choices = c("academic_yr", "campus", "category"),
selected = "academic_yr"),
selectInput("filter", "Select Ethnicity", choices = c("All", "African American", "American Indian", "Asian", "Chicano/Latino", "International", "White", "Unknown"), selected = "All"),
hr(),
helpText("Reference: University of California Information Center, Admissions (2010-2019)")
), # close the first box
box(title = "Admissions by Ethnicity", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
uc_admit_perc %>%
ggplot(aes_string(x = input$x, y = "filtered_count_fr", fill = "campus")) +
scale_fill_brewer(palette = "Paired") +
geom_col(position = "dodge") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme_minimal() +
labs(y = "Number of Admitted Freshmen")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin = "black",
dashboardHeader(title = "University of California Admissions from 2010 - 2019",
titleWidth = 600),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Admission Criteria", choices = c("academic_yr", "campus", "category"),
selected = "academic_yr"),
selectInput("campus", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
hr(),
helpText("Reference: University of California Information Center, Admissions (2010-2019)")
), # close the first box
box(title = "Admissions by Ethnicity", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
uc_admit_perc %>%
ggplot(aes_string(x = "ethnicity", y = "filtered_count_fr", fill = input$x)) +
scale_fill_brewer(palette = "Paired") +
geom_col(position = "dodge") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme_minimal() +
labs(y = "Number of Admitted Freshmen")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin = "black",
dashboardHeader(title = "University of California Admissions from 2010 - 2019",
titleWidth = 600),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Admission Criteria", choices = c("academic_yr", "campus", "category"),
selected = "academic_yr"),
hr(),
helpText("Reference: University of California Information Center, Admissions (2010-2019)")
), # close the first box
box(title = "Admissions by Ethnicity", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
uc_admit_perc %>%
ggplot(aes_string(x = "ethnicity", y = "filtered_count_fr", fill = input$x)) +
scale_fill_brewer(palette = "Paired") +
geom_col(position = "dodge") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme_minimal() +
labs(y = "Number of Admitted Freshmen")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
