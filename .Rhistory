#we have said that we are putting whatever was selected in the input sections to be on our axes
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("fill", "Select Fill Variable", choices = c("trophic_guild", "thermoregulation"),
selected = "thermoregulation"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = "locomotion", fill = input$fill)) +
geom_point() +
theme_light(base_size = 18) #inside the renderPlot function, we need to put ggplot inside... not we are designating the aesthetics as a string because we concatenated the variables together in x/y
#we have said that we are putting whatever was selected in the input sections to be on our axes
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("fill", "Select Fill Variable", choices = c("trophic_guild", "thermoregulation"),
selected = "thermoregulation"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = "locomotion", fill = input$fill)) +
geom_bar(position = "dodge") +
theme_light(base_size = 18) #inside the renderPlot function, we need to put ggplot inside... not we are designating the aesthetics as a string because we concatenated the variables together in x/y
#we have said that we are putting whatever was selected in the input sections to be on our axes
})
}
shinyApp(ui, server)
ggplot(homerange, aes_string(x = "locomotion", fill = input$fill)) +
geom_bar(position = "dodge") +
theme_linedraw(base_size = 18)
ui <- fluidPage(
selectInput("fill", "Select Fill Variable", choices = c("trophic_guild", "thermoregulation"),
selected = "thermoregulation"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = "locomotion", fill = input$fill)) +
geom_bar(position = "dodge") +
theme_linedraw(base_size = 18)
})
}
shinyApp(ui, server)
names(homerange)
homerange %>%
ggplot(aes(x = locomotion, fill = trophic_guild)) +
geom_bar()
homerange %>%
ggplot(aes(x = locomotion, fill = trophic_guild)) +
geom_bar(position = "dodge")
homerange %>%
ggplot(aes(x = locomotion, fill = thermoregulation)) +
geom_bar(position = "dodge")
library(shiny)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "Select Fill Variable", choices = c("trophic_guild", "thermore"), selected = "trophic_guild"),
plotOutput("plot", width = "600px", height = "500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = "locomotion", fill = input$x)) +
geom_bar(position = "dodge", alpha = 0.8, color = "black") +
theme_light(base_size = 18) +
labs(x = NULL,
y = NULL,
fill = "Fill Variable")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "Select Fill Variable", choices = c("trophic_guild", "thermoregulation"), selected = "trophic_guild"),
plotOutput("plot", width = "600px", height = "500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = "locomotion", fill = input$x)) +
geom_bar(position = "dodge", alpha = 0.8, color = "black") +
theme_light(base_size = 18) +
labs(x = NULL,
y = NULL,
fill = "Fill Variable")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "Select Fill Variable", choices = c("trophic_guild", "thermoregulation"), selected = "trophic_guild"),
plotOutput("plot", width = "600px", height = "500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = "locomotion", fill = input$x)) +
geom_bar(position = "dodge", alpha = 0.8, color = "black") +
theme_light(base_size = 18) +
labs(x = NULL,
y = NULL,
fill = "Guild or Thermo?")
})
}
shinyApp(ui, server)
names(homerange)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:",
choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot")
)
)
)
# define a server for the Shiny app
server <- function(input, output) {
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:",
choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot")
)
)
)
# define a server for the Shiny app
server <- function(input, output) {
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.\_hra)) +
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:",
choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot")
)
)
)
# define a server for the Shiny app
server <- function(input, output) {
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10_hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("tidyverse")
library("shiny")
library("naniar")
library("shinydashboard")
library("tidyverse")
library("shiny")
library("naniar")
library("shinydashboard")
if (!require("tidyverse")) install.packages('tidyverse')
if (!require("tidyverse")) install.packages('tidyverse')
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:",
choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot")
)
)
)
library("tidyverse")
library("shiny")
library("naniar")
library("shinydashboard")
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:",
choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot")
)
)
)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:",
choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot")
)
)
)
# define a server for the Shiny app
server <- function(input, output) {
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
homerange <- readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
setwd("C:/Users/adria/Desktop/BIS15W2021_ang")
homerange <- readr::read_csv("lab13/data/Tamburelloetal_HomeRangeDatabase.csv")
if (!require("tidyverse")) install.packages('tidyverse')
if (!require("shiny")) install.packages('shiny')
if (!require("naniar")) install.packages('naniar')
if (!require("shinydashboard")) install.packages('shinydashboard')
if (!require("tidyverse")) install.packages('tidyverse')
library("tidyverse")
library("shiny")
library("naniar")
library("shinydashboard")
homerange <- readr::read_csv("lab13/data/Tamburelloetal_HomeRangeDatabase.csv")
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:",
choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot")
)
)
)
# define a server for the Shiny app
server <- function(input, output) {
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
runApp('lab13/plot_homerange_classattempt.R')
runApp('lab13/plot_homerange_classattempt.R')
runApp('lab13/plot_homerange_classattempt.R')
runApp('lab13/plot_homerange_classattempt.R')
runApp('lab13/plot_homerange_classattempt.R')
runApp('lab13/plot_homerange_classattempt.R')
runApp('lab13/plot_homerange_classattempt.R')
library(palmerpenguins)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(janitor)
library(here)
library(skimr)
library(ggthemes)
library(naniar)
library(readr)
colors <- paletteer::palettes_d_names
view(colors)
weekly_size <- readxl::read_xlsx("data/cbs_drought_project.xlsx", sheet = "Weekly Surveys (complete racks)")
weekly_size
weekly_size_cleaned <- weekly_size %>%
pivot_longer(-c(pop, age, rep, treatment),
names_to = "date",
values_to = "measurement") %>%
separate(date, into = c("month", "day", "size measurement"),
sep = "_") %>%
mutate_all(tolower) %>%
janitor::clean_names()
weekly_size_cleaned
weekly_size_cleaned$day <- as.numeric(weekly_size_cleaned$day)
weekly_size_cleaned$measurement <- as.numeric(weekly_size_cleaned$measurement)
weekly_size_cleaned$treatment <- as.factor(weekly_size_cleaned$treatment)
weekly_size_cleaned
weekly_size_cleaned <- weekly_size_cleaned %>%
mutate(day = day - 9)
weekly_size_cleaned
weekly_size_cleaned <- weekly_size_cleaned %>%
mutate(elevation = case_when(pop == "sq1" | pop == "wl2" | pop == "yo1" | pop == "sq3" ~ "high",
pop == "dpr" | pop == "kc2" | pop == "wl1" ~ "intermediate",
pop == "tm2" | pop == "bh" | pop == "ih" ~ "low")) %>%
mutate(age = case_when(age == "a1" ~ "7wk",
age == "a2" ~ "5wk",
age == "a3" ~ "3wk")) %>%
select(-month)
glimpse(weekly_size_cleaned)
weekly_size_cleaned
summary(weekly_size_cleaned)
weekly_size_cleaned %>%
filter(treatment == "severe drought", size_measurement == "height") %>%
filter(pop != "NA") %>%
ggplot(aes(x = pop, y = measurement, color = elevation)) +
geom_boxplot() +
labs(x = "pop",
y = "height (cm)") +
ggsave("severe_drought_height_boxplot_new.pdf", path = "plots")
weekly_size_cleaned %>%
filter(treatment == "light drought", size_measurement == "height") %>%
filter(pop != "NA") %>%
ggplot(aes(x = pop, y = measurement, color = elevation)) +
geom_boxplot() +
labs(x = "pop",
y = "height (cm)")
weekly_size_cleaned %>%
filter(treatment == "control", size_measurement == "height") %>%
filter(pop != "NA") %>%
ggplot(aes(x = pop, y = measurement, color = elevation)) +
geom_boxplot() +
labs(x = "pop",
y = "height (cm)")
weekly_size_cleaned %>%
filter(size_measurement == "height") %>%
ggplot(aes(x = pop, y = measurement, color = elevation, fill = treatment)) +
geom_boxplot() +
labs(x = "pop",
y = "height (cm)")
weekly_size_cleaned %>%
filter(size_measurement == "height") %>%
filter(pop != "NA") %>%
group_by(pop, treatment) %>%
summarise(mean_height = mean(measurement)) %>%
ggplot(aes(x = pop, y = mean_height, fill = pop)) +
scale_fill_manual(values = paletteer::paletteer_d("LaCroixColoR::paired")) +
geom_col(position = "dodge") +
facet_wrap(~treatment) +
labs(x = "pop",
y = "height (cm)")
weekly_size_cleaned %>%
filter(size_measurement == "height") %>%
filter(pop != "NA") %>%
group_by(pop, treatment, age, elevation) %>%
summarise(mean_height = mean(measurement)) %>%
ggplot(aes(x = age, y = mean_height, fill = elevation)) +
scale_fill_manual(values = paletteer::paletteer_d("LaCroixColoR::paired")) +
geom_col(position = "dodge") +
facet_wrap(~pop) +
labs(x = "pop",
y = "height (cm)")
weekly_size_cleaned %>%
filter(size_measurement == "height") %>%
filter(pop != "NA") %>%
group_by(pop, treatment) %>%
summarise(mean_height = mean(measurement)) %>%
ggplot(aes(x = pop, y = mean_height, color = pop)) +
scale_color_manual(values = paletteer::paletteer_d("LaCroixColoR::paired")) +
geom_point()+
geom_line()+
labs(x = "pop",
y = "height (cm)")
weekly_size_cleaned %>%
filter(size_measurement == "height") %>%
filter(pop != "NA") %>%
group_by(pop, treatment) %>%
summarise(mean_height = mean(measurement)) %>%
ggplot(aes(x = treaetment, y = mean_height, color = pop)) +
scale_color_manual(values = paletteer::paletteer_d("LaCroixColoR::paired")) +
geom_point()+
geom_line()+
labs(x = "pop",
y = "height (cm)")
weekly_size_cleaned %>%
filter(size_measurement == "height") %>%
filter(pop != "NA") %>%
group_by(pop, treatment) %>%
summarise(mean_height = mean(measurement)) %>%
ggplot(aes(x = treatment, y = mean_height, color = pop)) +
scale_color_manual(values = paletteer::paletteer_d("LaCroixColoR::paired")) +
geom_point()+
geom_line()+
labs(x = "pop",
y = "height (cm)")
weekly_size_cleaned %>%
filter(size_measurement == "height") %>%
filter(pop != "NA") %>%
group_by(pop, treatment) %>%
summarise(mean_height = mean(measurement)) %>%
ggplot(aes(x = treatment, y = mean_height, color = pop)) +
scale_color_manual(values = paletteer::paletteer_d("LaCroixColoR::paired")) +
geom_point()+
geom_line(group = pop)+
labs(x = "pop",
y = "height (cm)")
weekly_size_cleaned %>%
filter(size_measurement == "height") %>%
filter(pop != "NA") %>%
group_by(pop, treatment) %>%
summarise(mean_height = mean(measurement)) %>%
ggplot(aes(x = treatment, y = mean_height, color = pop)) +
scale_color_manual(values = paletteer::paletteer_d("LaCroixColoR::paired")) +
geom_point()+
geom_line(aes(group = pop))+
labs(x = "pop",
y = "height (cm)")
weekly_size_cleaned %>%
filter(size_measurement == "height") %>%
filter(pop != "NA") %>%
filter(treatment == "severe drought") %>%
group_by(pop, treatment, age, elevation) %>%
summarise(mean_height = mean(measurement)) %>%
ggplot(aes(x = age, y = mean_height, fill = elevation)) +
scale_fill_manual(values = paletteer::paletteer_d("LaCroixColoR::paired")) +
geom_col(position = "dodge") +
facet_wrap(~pop) +
labs(x = "pop",
y = "height (cm)")
weekly_size_cleaned %>%
filter(size_measurement == "height") %>%
filter(pop != "NA") %>%
filter(treatment == "intermediate drought") %>%
group_by(pop, treatment, age, elevation) %>%
summarise(mean_height = mean(measurement)) %>%
ggplot(aes(x = age, y = mean_height, fill = elevation)) +
scale_fill_manual(values = paletteer::paletteer_d("LaCroixColoR::paired")) +
geom_col(position = "dodge") +
facet_wrap(~pop) +
labs(x = "pop",
y = "height (cm)")
weekly_size_cleaned %>%
filter(size_measurement == "height") %>%
filter(pop != "NA") %>%
filter(treatment == "intermediate") %>%
group_by(pop, treatment, age, elevation) %>%
summarise(mean_height = mean(measurement)) %>%
ggplot(aes(x = age, y = mean_height, fill = elevation)) +
scale_fill_manual(values = paletteer::paletteer_d("LaCroixColoR::paired")) +
geom_col(position = "dodge") +
facet_wrap(~pop) +
labs(x = "pop",
y = "height (cm)")
