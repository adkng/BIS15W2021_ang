library(RColorBrewer)
library(paletteer)
library(janitor)
library(here)
library(skimr)
library(ggthemes)
library(naniar)
library(readr)
library(lubridate)
colors <- paletteer::palettes_d_names
#view(colors)
nectar_perflower <- read_csv(here("potential_datasets", "AgriLand_Nectar_perflower.csv"))
#nectar_perspecies <- read_csv(here("potential_datasets", "AgriLand_Nectar_perspecies.csv"))
nectar_perflower <- nectar_perflower %>%
clean_names() %>%
mutate_all(tolower)
summary(nectar_perflower)
nectar_perflower <- nectar_perflower %>%
separate(species,
into = c("genus", "species")) %>%
separate(bagging_date,
into = c("bagging_day", "bagging_month", "bagging_year"),
sep = "/") %>%
separate(collection_date,
into = c("collection_day", "collection_month", "collection_year"),
sep = "/")
nectar_perflower <- nectar_perflower %>%
separate(habitat,
into = c("habitat_class", "habitat_specific"),
sep = "-",
extra = "merge")
nectar_perflower <- nectar_perflower %>%
select(-bagging_year, -collection_year)
nectar_perflower
names(nectar_perflower)
nectar_perflower %>%
count(genus, species, sort = T)
nectar_perflower %>%
count(genus, sort = T)
nectar_perflower %>%
count(habitat_class, sort = T)
nectar_perflower %>%
count(genus, species, habitat_class)
levels(nectar_perflower$species)
nectar_perflower %>%
ggplot(aes(x = habitat_class)) +
geom_bar() +
coord_flip()
nectar_perflower %>%
filter(habitat_specific != "NA") %>%
ggplot(aes(x = habitat_class, fill = habitat_specific))+
geom_bar(position = "dodge") +
coord_flip()
View(nectar_perflower)
nectar_perflower_clean <- nectar_perflower %>%
clean_names() %>%
mutate_all(tolower)
summary(nectar_perflower)
nectar_perflower_clean <- nectar_perflower_clean %>%
separate(species,
into = c("genus", "species")) %>%
separate(bagging_date,
into = c("bagging_day", "bagging_month", "bagging_year"),
sep = "/") %>%
separate(collection_date,
into = c("collection_day", "collection_month", "collection_year"),
sep = "/") %>%
separate(habitat,
into = c("habitat_class", "habitat_specific"),
sep = "-",
extra = "merge") %>%
select(-bagging_year, -collection_year)
nectar_perflower_clean <- nectar_perflower %>%
clean_names() %>%
mutate_all(tolower)
summary(nectar_perflower)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(janitor)
library(here)
library(skimr)
library(ggthemes)
library(naniar)
library(readr)
library(lubridate)
colors <- paletteer::palettes_d_names
#view(colors)
nectar_perflower <- read_csv(here("potential_datasets", "AgriLand_Nectar_perflower.csv"))
#nectar_perspecies <- read_csv(here("potential_datasets", "AgriLand_Nectar_perspecies.csv"))
nectar_perflower_clean <- nectar_perflower %>%
clean_names() %>%
mutate_all(tolower)
summary(nectar_perflower)
nectar_perflower_clean <- nectar_perflower_clean %>%
separate(species,
into = c("genus", "species")) %>%
separate(bagging_date,
into = c("bagging_day", "bagging_month", "bagging_year"),
sep = "/") %>%
separate(collection_date,
into = c("collection_day", "collection_month", "collection_year"),
sep = "/") %>%
separate(habitat,
into = c("habitat_class", "habitat_specific"),
sep = "-",
extra = "merge") %>%
select(-bagging_year, -collection_year)
nectar_perflower
nectar_perflower_clean <- nectar_perflower_clean %>%
separate(species,
into = c("genus", "species")) %>%
separate(bagging_date,
into = c("bagging_day", "bagging_month", "bagging_year"),
sep = "/") %>%
separate(collection_date,
into = c("collection_day", "collection_month", "collection_year"),
sep = "/") %>%
separate(habitat,
into = c("habitat_class", "habitat_specific"),
sep = "-",
extra = "merge") %>%
select(-bagging_year, -collection_year)
nectar_perflower_clean
library(tidyverse)
library(ggmap)
library(lubridate)
setwd("C:/Users/adria/Desktop/BIS15W2021_ang")
library(tidyverse)
library(ggmap)
library(lubridate)
x <- 0                 # Preliminary specification of data object
repeat{                # Head of repeat-loop
x <- x + 1           # Body of repeat-loop
print(x)
if(x >= 10) {        # Break condition of repeat-loop
break
}
}
data <- data.frame(x1 = 1:5,      # Create example data
x2 = 6:10,
x3 = 11:15)
data
data <- data.frame(x1 = 1:5,      # Create example data
x2 = 6:10,
x3 = 11:15)
data # we will use a repeat loop to change the values
data1 <- data                   # Replicate example data
i <- 1                          # Create running index (is like 'x' in the previous example)
repeat{                         # Start repeat-loop
data1[ , i] <- data1[ , i] + 100 # the value inside the data frame structure based on the column... we are taking the Ith column, it's value, and adding 100 to that value. it is then stored in the original column to change to value
i <- i + 1 # i will add 1 to the index
if(i > 2) {
break
}
}
data1
data(iris)
head(iris)
iris1 <- iris # Replicate example data
i <- 1
repeat{
iris1[ , i] <- iris1[ , i] + 100
i <- i + 1
if(i > 4) {
break
}
}
iris1
iris1 <- iris
iris1 <- iris # Replicate example data
i <- 1
repeat{
iris1[ , i] <- iris1[ , i] + 10
i <- i + 1
if(i > 4) {
break
}
}
iris1
iris1 <- iris # Replicate example data
i <- 1 # step 1: creat running index with 1
repeat{ # begin repeat statement
iris1[ , i] <- iris1[ , i] * 10 # we wi
i <- i + 1
if(i > 4) {
break
}
}
iris1
i <- 1
iris_my <- iris
i <- 1
repeat{
iris_my[ , i] <- iris[ , 4] * 10
i <- i + 1
if (is.numeric(iris_my[ , i])) {
break
}
}
head(iris_my)
x <- 0                  # Preliminary specification of data object
while(x < 10) {         # Head of while-loop
x <- x + 1            # Body of while-loop
print(x)
}
data2 <- data                       # Replicate example data
data2
i <- 1                              # Create running index
while(i <= 2) {                     # Start while-loop
data2[ , i] <- data2[ , i] + 100
i <- i + 1
}
data2
head(iris)                                        # Showing head of data in RStudio console
iris2 <- iris                                     # Replicate example data
iris2
i <- 1
while (is.numeric(iris2[, i])) {
iris2[ , i] <- iris[ , i] * 10
i <- i + 1
}
iris2
iris2 <- iris                                     # Replicate example data
iris2
i <- 1
while (is.numeric(iris2[, i])) { # run the loop when the specific column has numeric values
iris2[ , i] <- iris2[ , i] * 10
i <- i + 1
}
iris2
iris2
i <- 1
while (is.numeric(iris2[, i])) { # run the loop when the specific column has numeric values
iris2[ , i] <- iris2[ , i] * 10
i <- i + 1
}
head(iris2)
head(iris)                                        # Showing head of data in RStudio console
iris2 <- iris                                     # Replicate example data
iris2
i <- 1
while (is.numeric(iris2[, i])) { # run the loop when the specific column has numeric values
iris2[ , i] <- iris2[ , i] * 10
i <- i + 1
}
head(iris2)
for (i in 1:10) {
print(i)
}
data3 <- data                       # Replicate example data
data3
for(i in 1:2) {           # for-loop over columns
data3[ , i] <- data3[ , i] + 100
}
data3
head(iris)                                             # Inspecting iris flower data set
iris3 <- iris                                          # Replicate iris data set
head(iris)                                             # Inspecting iris flower data set
iris3 <- iris                                          # Replicate iris data set
for(i in 3){
iris3[ , i] <- iris3[ , i] * 10
}
iris3
head(iris)                                             # Inspecting iris flower data set
iris3 <- iris                                          # Replicate iris data set
for(i in 2){
iris3[ , i] <- iris3[ , i] * 10
}
iris3
head(iris)                                             # Inspecting iris flower data set
iris3 <- iris
for (i in c(2,4)) {
iris3[ , i] <- iris3[ , i] * 10
}
iris3
iris3 <- iris
for (i in 1:ncol(iris3)) {
if(str_detect(colnames(iris3)[i], "width")){
iris3[ , i] <- iris3[ , i] * 10
}
}
iris3
iris3 <- iris
for (i in 1:ncol(iris3)) {
if(str_detect(colnames(iris3)[i], "width")){
iris3[ , i] <- iris3[ , i] * 10
}
}
iris3
iris3 <- iris
for (i in 1:ncol(iris3)) {
if(str_detect(colnames(iris3)[i], "width")){
iris3[ , i] <- iris3[ , i] * 10
}
}
iris3
if(str_detect(colnames(iris3)[i], "Width")){
iris3[ , i] <- iris3[ , i] * 10
}
iris3
iris3 <- iris
for (i in 1:ncol(iris3)) {
if(str_detect(colnames(iris3[i]), "Width")){
iris3[ , i] <- iris3[ , i] * 10
}
}
iris3
data_files <- list.files("data/locations", pattern = "locations-2*", full.names = TRUE)
data_files
results <- vector(mode = "integer", length = length(data_files))
# create an *empty* vector to store those counts
results <- vector(mode = "integer", length = length(data_files)) # this will store integers in this vector, and the length will be as long as the data_files (what we created above)
for (i in 1:length(data_files)){ # we will loop from 1 to the length of the data_files vector
data0 <- read_csv(data_files[i]) # we will read the .csv file in the locations we found
count <- nrow(data0) # we will count how many rows are inside the data
results[i] <- count # we will save the count into the results vector
}
results
# Start by creating an empty data frame
results <- data.frame(file_name = vector(mode = "character", length = length(data_files)), # first column is file+name, length is the second column, and the third column is the count
count = vector(mode = "integer", length = length(data_files)))
for (i in length(data_files)) {
data0 <- read_csv(data_files[i])
count <- nrow(data0) # now we need to specify what we want in the dataframe
results$file_name <- data_files[i]
results$count[i] <- count
}
results
# Start by creating an empty data frame
results <- data.frame(file_name = vector(mode = "character", length = length(data_files)), # first column is file+name, length is the second column, and the third column is the count
count = vector(mode = "integer", length = length(data_files)))
for (i in length(data_files)) {
data0 <- read_csv(data_files[i])
count <- nrow(data0) # now we need to specify what we want in the dataframe
results$file_name[i] <- data_files[i]
results$count[i] <- count
}
results
data_files <- list.files("data/locations", pattern = "locations-2*", full.names = TRUE)
data_files
# create an *empty* vector to store those counts
results <- vector(mode = "integer", length = length(data_files)) # this will store integers in this vector, and the length will be as long as the data_files (what we created above)
for (i in 1:length(data_files)){ # we will loop from 1 to the length of the data_files vector
data0 <- read_csv(data_files[i]) # we will read the .csv file in the locations we found
count <- nrow(data0) # we will count how many rows are inside the data
results[i] <- count # we will save the count into the results vector
}
results
# Start by creating an empty data frame
results <- data.frame(file_name = vector(mode = "character", length = length(data_files)), # first column is file+name, length is the second column, and the third column is the count
count = vector(mode = "integer", length = length(data_files)))
for (i in length(data_files)) {
data0 <- read_csv(data_files[i])
count <- nrow(data0) # now we need to specify what we want in the dataframe
results$file_name[i] <- data_files[i]
results$count[i] <- count
}
results
data_files <- list.files("data/locations", pattern = "locations-2*", full.names = TRUE)
data_files
# create an *empty* vector to store those counts
results <- vector(mode = "integer", length = length(data_files)) # this will store integers in this vector, and the length will be as long as the data_files (what we created above)
for (i in 1:length(data_files)){ # we will loop from 1 to the length of the data_files vector
data0 <- read_csv(data_files[i]) # we will read the .csv file in the locations we found
count <- nrow(data0) # we will count how many rows are inside the data
results[i] <- count # we will save the count into the results vector
}
results
# Start by creating an empty data frame
results <- data.frame(file_name = vector(mode = "character", length = length(data_files)), # first column is file+name, length is the second column, and the third column is the count
count = vector(mode = "integer", length = length(data_files)))
for (i in 1:length(data_files)) {
data0 <- read_csv(data_files[i])
count <- nrow(data0) # now we need to specify what we want in the dataframe
results$file_name[i] <- data_files[i]
results$count[i] <- count
}
results
data_files3 <- list.files("data/individual_collar_data", full.names = TRUE)
data_files3
data_files3 <- list.files("data/individual_collar_data", full.names = TRUE)
data_files3
# only ggplot
for (i in 1:length(data_files3)){ # for each object in the vector data_files3 (1-10)
data0 <- as.data.frame(read_csv(data_files3[i])) # you need to read the csv and then turn it into dataframe... then save it!
print( # note it will not show the maps unless you say something inside the loop!
ggplot(data0, aes(x=long,y=lat))+
geom_path()+
geom_point()+
labs(title = data_files3[i],
x = "longitude",
y = "latitude")
)
}
# how to show them on a map?
data_list <- lapply(data_files3, read_csv)
collar_data_all <- bind_rows(data_list)
collar_data_all
collar_data_all %>%
summarise(max_lat = max(lat),
min_lat = min(lat),
max_long = max(long),
min_long = min(long))
lat <- c(14.91539, 31.56526)
long <- c(122.0874, 134.9906)
bbox <- make_bbox(long, lat, f = 0.5)
map <- get_map(bbox, maptype = "terrain", source = "stamen")
ggmap(map)
map <- get_map(bbox, maptype = "terrain", source = "stamen")
ggmap(map)
for (i in 1:length(data_files3)) {
data- <- as. data.frame(read_csv(data_files3[i]))
map <- get_map(bbox, maptype = "terrain", source = "stamen")
ggmap(map)
for (i in 1:length(data_files3)) {
data- <- as.data.frame(read_csv(data_files3[i]))
map <- get_map(bbox, maptype = "terrain", source = "stamen")
ggmap(map)
for (i in 1:length(data_files3)) {
data <- as.data.frame(read_csv(data_files3[i]))
print(
ggmap(map) +
geom_path(data = data0, aes(long, lat))+
geom_point(data = data0, aes(long, lat))+
labs(title = data_files3[i],
x = "longitude",
y = "latitude")
)
}
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install()                            # To install core packages or update installed packages
# BiocManager::install(c("ShortRead", "Biostrings"))# Install specific packages
library(ShortRead)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()                            # To install core packages or update installed packages
BiocManager::install(c("ShortRead", "Biostrings"))# Install specific packages
library(ShortRead)
library(Biostrings)
readFasta("data/archaea-dna/a-saccharovorans.fasta")
reads <- readFasta("data/archaea-dna/a-saccharovorans.fasta")
seq <- sread(reads)
sread(reads)
alphabetFrequency(seq)
base_freq <- alphabetFrequency(seq)
gc_content <- (base_freq[1, "G"] + base_freq[1, "C"]) / sum(base_freq) * 100
gc_content
data_files2 <- list.files("data/archaea-dna")
data_files2
library(qtl)
library(qtlcharts)
knitr::opts_chunk$set(fig.width=8, fig.height=6, message=FALSE)
sug <- read.cross("csv", "https://rqtl.org", "sug.csv",
genotypes=c("CC", "CB", "BB"), alleles=c("C", "B"))
summary(sug)
head(sug$pheno)
nind(sug)    # No. individuals
nphe(sug)    # No. phenotypes
nchr(sug)    # No. chromosomes
totmar(sug)  # Total markers
nmar(sug)    # No. markers on each chromosome
plot(sug)
plotMissing(sug, main="") # summarise missing data in plot
plotMissing(sug, main="", reorder=1)
plotMap(sug)
plotMap(sug,show.marker.names=TRUE)
#?plotMap
plotMap(sug)
plotMap(sug,show.marker.names=TRUE)
#?plotPheno
plotPheno(sug, pheno.col=1)
plotPheno(sug, pheno.col=2)
plotPheno(sug, pheno.col=3)
plotPheno(sug, pheno.col=4)
iplotMap(sug) #D7MIT31
iplotCorr(sug$pheno)
iplotCorr(sug$pheno, chartOpts=list(height=300, width=600, scatcolors="pink"))
sug <- calc.genoprob(sug, step=1) # 1 indicates the density to do the calculation for distance between markers
out.em <- scanone(sug)
out.em2 <- scanone(sug, pheno.col=1:4) # when you calculate the whole thing
summary(out.em)
summary(out.em2)
summary(out.em, threshold=3)
plot(out.em)
plot(out.em, chr=c(7,15), ylab="LOD Score")
plot(out.em)
plot(out.em, chr=c(7,15), ylab="LOD Score")
iplotScanone(out.em)
iplotScanone(out.em, chr=c(7,15))
iplotScanone(out.em, sug) #focused data, original
iplotScanone(out.em, sug, chr=c(7,15))
v = 11
w = c(5, 9, 18, 25)
x = v + w
###
data("ToothGrowth")
force(ToothGrowth)
avg_tooth_length = mean(ToothGrowth$len)
ToothGrowthVC = subset(ToothGrowth, supp == "VC")
View(ToothGrowthVC)
plot(ToothGrowthVC$dose, ToothGrowthVC$len,
xlab = "Tooth Length",
ylab = "Dosage",
main = "Tooth Growth with Vitamin C Supplement")
plot(ToothGrowthVC$dose, ToothGrowthVC$len,
xlab = "Dosage",
ylab = "Tooth Length",
main = "Tooth Growth with Vitamin C Supplement")
x*17
